#!/bin/bash
# if error, exit with a failure return code
set -e pipefail

ENV_GEN_FILE=".env"

# Create temporary files to store key-value pairs
tmp_keys=$(mktemp)
tmp_values=$(mktemp)

# Cleanup function
cleanup() {
    rm -f "$tmp_keys" "$tmp_values"
}
trap cleanup EXIT

# Function to process env file and update variables
process_env_file() {
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip comments and empty lines
        if [[ $line =~ ^[[:space:]]*# ]] || [[ -z $line ]]; then
            continue
        fi
        
        # Split on first = only
        if [[ $line =~ ^([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            
            # Trim whitespace
            key=$(echo "$key" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            
            # Store key and value in temporary files
            echo "$key" >> "$tmp_keys"
            echo "$value" >> "$tmp_values"
        fi
    done < "$1"
}

# Find and process base env files
base_files=$(find . -name "*.env" -not -path "./.env" -not -path "./override/*")
for file in $base_files; do
    process_env_file "$file"
done

# Process override files if they exist
if [ -d "override" ]; then
    override_files=$(find ./override -name "*.env")
    for file in $override_files; do
        process_env_file "$file"
    done
fi

# Write output file
printf "#\n# Do not edit this file. It is generated!\n#\n" > $ENV_GEN_FILE

# Combine keys and values, sort, and remove duplicates (keeping last occurrence)
paste "$tmp_keys" "$tmp_values" | awk '!seen[$1]++' | sort | while IFS=$'\t' read -r key value; do
    printf "%s=%s\n" "$key" "$value" >> $ENV_GEN_FILE
done